
(* :Title: QCDO.gen *) 

(* :Summary: Generic model for FeynArts` *)

(* :Context: HighEnergyPhysics`FeynArts` *)

(* :Description:
	This model file defines the general analytical propagators and
	couplings. 
*)

(* This line indicates the type of generic model that is loaded (should
   be the basename of this file):
*)
$FeynmanRulesType = "QCDO";

(* Kinematic indices are `transported' along a propagator line.
   KinematicIndices[X] = {Name} means, that the generic field X will carry
   an index Index[Name, i] along the line:  
   X[ n, {m..}, p, {Index[Name, i]} -> {Index[Name, i+1]} ]
*)
KinematicIndices[F] = {};
KinematicIndices[V] = {Lorentz,Color};
KinematicIndices[U] = {Color};

Appearance[ Index[Lorentz, i_Integer ] ] := Greek[i+10];
Appearance[ Index[Color, i_Integer ] ] := Alph[i];

GenericPropagators[ "QCDO" ] =
{

(* general quark propagator:
*)
AnalyticalPropagator[External][ s F[i, mom] ] == 
	  NonCommutative[ DiracSpinor[ mom, Mass[F[i]] ] ], 

AnalyticalPropagator[Internal][ s F[i,mom] ] == 
          NonCommutative[ QuarkPropagator[mom, Mass[F[i]]] ],

(* general gluon propagator:
*)
AnalyticalPropagator[External][ s V[i, mom,{li,ci}] ] == 
	  PolarizationVector[ mom, li, ci ], 

AnalyticalPropagator[Internal][ s V[i,mom,{mu,a}->{nu,b}] ] == 
          GluonPropagator[ mom, {mu, a}, {nu, b} ],

(* general Fadeev-Popov-ghost propagator: 
*)
AnalyticalPropagator[Internal][ s U[i,mom,{a}->{b}] ] == 
          GhostPropagator[  mom , a, b ]
};

GenericCouplings[ "QCDO" ] =
{

(* FFV-coupling:
*)
AnalyticalCoupling[ s1 F[i,mom1], s2 F[j,mom2], s3 V[k,mom3,{mu,a}] ] ==
   G[1][ s1 F[i], s2 F[j], s3 V[k] ].
     { NonCommutative[QuarkGluonVertex[ {mom3,mu,a}, {mom1}, {mom2}] ] },

(* FFVV-operator coupling:
*)
AnalyticalCoupling[ s1 F[i,mom1], s2 F[j,mom2], s3 V[k1,mom3,{mu,a}],
                    s4 V[k2,mom4,{nu,b}] ] ==
   G[1][ s1 F[i], s2 F[j], s3 V[k1], s4 V[k2] ].
     { NonCommutative[Twist2QuarkOperator[{mom1}, {mom2}, {mom3,mu,a},
                                                          {mom4,nu,b} ] ] 
     },

(* FFVVV-operator coupling:
*)
AnalyticalCoupling[ s1 F[i,mom1], s2 F[j,mom2], s3 V[k1,mom3,{mu,a}],
                    s4 V[k2,mom4,{nu,b}], s5 V[k3,mom5,{rho,c} ] ] ==
   G[1][ s1 F[i], s2 F[j], s3 V[k1], s4 V[k2], s5 V[k3] ].
     { NonCommutative[Twist2QuarkOperator[{mom1}, {mom2}, {mom3,mu,a},
                                          {mom4,nu,b}, {mom5,rho,c} ] ] 
     },
 
(* UUV-coupling:
*)
AnalyticalCoupling[ s1 U[i,mom1,{a}], s2 U[j,mom2,{b}], 
                    s3 V[k,mom3,{mu,c}] ]   == 
   G[1][ s1 U[i], s2 U[j], s3 V[k] ] . 
	   { GluonGhostVertex[{mom1,mu,c},{mom1,a},{mom2,b}] },

(* VVV-coupling:
*)
AnalyticalCoupling[ s1 V[i,mom1,{mu,a}], s2 V[j,mom2,{nu,b}], 
		    s3 V[k,mom3,{rho,c}] ]  ==
   G[1][ s1 V[i], s2 V[j], s3 V[k] ] . 
           {GluonVertex[ {mom1,mu,a}, {mom2,nu,b}, {mom3,rho,c} ]},

(* VVVV-coupling:
*)
AnalyticalCoupling[ s1 V[i,mom1,{mu,a}], s2 V[j,mom2,{nu,b}], 
		    s3 V[k,mom3,{rho,c}], s4 V[l,mom4,{si,d}] ]  ==
   G[1][ s1 V[i], s2 V[j], s3 V[k], s4 V[l] ] . 
           {GluonVertex[ {mom1,mu,a}, {mom2,nu,b}, 
                         {mom3,rho,c}, {mom4,si,d} ]}
};

(* TruncationRules: rule for omitting the wave functions of external
   Propagators defined in this file.
*)
TruncationRules = 
  {
   PolarizationVector[__] 	-> 1 ,
   DiracSpinor[__] 		-> 1 
  };

(* LastGenericRules: the very last rules that are applied to an amplitude
   before it is returned by CreateFeynAmp.
*)
LastGenericRules = 
  {
   (* relicts of the truncation of spinors: *)
   Dot[ 1, line__, 1 ] :> Dot[ line ],
   Dot[ 1, 1 ] :> 1,
   (* Outgoing vector bosons: *)
   PolarizationVector[ k:FourMomentum[ Outgoing, i_Integer ], li_, ci_ ] :> 
    Conjugate[ PolarizationVector[ k, li, ci ] ],
   FourMomentum[ Incoming, i_Integer ] :> Global`p[i],
   FourMomentum[ Outgoing, i_Integer ] :> Global`k[i]
  };

(**)
